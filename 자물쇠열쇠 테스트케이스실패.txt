#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

void print(vector<pair<int, int>>& a) {
	for (auto iter = a.begin(); iter != a.end(); iter++) {
		cout << "( " << iter->first << ", " << iter->second << " ) ";
	}
	cout << endl;
}

bool comp(pair<int, int> a, pair<int, int> b) {
	if (a.first == b.first) return a.second < b.second;
	else return a.first < b.first;
}

bool solution(vector<vector<int>> key, vector<vector<int>> lock) {
	vector<pair<int, int>> k, sol, tmp1, tmp2;
	int M = key.size();
	int N = lock.size();
	for (int i = 0; i < M; i++)
		for (int j = 0; j < M; j++)
			if (key[i][j] == 1) k.push_back(make_pair(i, j));
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			if (lock[i][j] == 0) sol.push_back(make_pair(i, j));


	for (int turn = 0; turn < 4; turn++) {
		for (int i = (1 - M); i < N; i++)
			for (int j = (1 - M); j < N; j++) {
				tmp1 = sol;

				int x, y;
				for (auto iter = k.begin(); iter != k.end(); iter++) {
					x=iter->first + i;
					y=iter->second +j;
					if (x >= 0 && x < N && y >= 0 && y < N)  tmp2.push_back(make_pair(x, y));
				}
				sort(tmp1.begin(), tmp1.end(), comp);
				sort(tmp2.begin(), tmp2.end(), comp);
				if (tmp1 == tmp2) return true;
				tmp2.clear();
			}

		for (int i = 0; i < M; i++) {    //회전
			k[i] = make_pair(k[i].second, M - 1 - k[i].first);
		}

	}

	return false;
}


int main() {
	vector<vector<int>> a;
	vector<vector<int>> b;
	vector<int> a1, a2, a3;
	a1.push_back(0);
	a1.push_back(0);
	a1.push_back(0);
	a2.push_back(1);
	a2.push_back(0);
	a2.push_back(0);
	a3.push_back(0);
	a3.push_back(1);
	a3.push_back(1);
	a.push_back(a1);
	a.push_back(a2);
	a.push_back(a3);

	vector<int> b1, b2, b3;
	b1.push_back(1);
	b1.push_back(1);
	b1.push_back(1);
	b2.push_back(1);
	b2.push_back(1);
	b2.push_back(0);
	b3.push_back(1);
	b3.push_back(0);
	b3.push_back(1);

	b.push_back(b1);
	b.push_back(b2);
	b.push_back(b3);

	solution(a, b);
}